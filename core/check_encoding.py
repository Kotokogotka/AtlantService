#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –ø—Ä–æ–±–ª–µ–º —Å –∫–æ–¥–∏—Ä–æ–≤–∫–æ–π –≤ –ø—Ä–æ–µ–∫—Ç–µ AtlantService
"""
import os
import sys
import django
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
BASE_DIR = Path(__file__).resolve().parent
sys.path.insert(0, str(BASE_DIR))

# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º Django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'core.settings')
django.setup()

from django.db import connection
import chardet
import locale


def check_system_encoding():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º–Ω–æ–π –∫–æ–¥–∏—Ä–æ–≤–∫–∏"""
    print("=== –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º–Ω–æ–π –∫–æ–¥–∏—Ä–æ–≤–∫–∏ ===")
    print(f"System encoding: {sys.getdefaultencoding()}")
    print(f"File system encoding: {sys.getfilesystemencoding()}")
    print(f"Current locale: {locale.getlocale()}")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
    env_vars = ['LANG', 'LC_ALL', 'PYTHONIOENCODING']
    for var in env_vars:
        value = os.environ.get(var, 'Not set')
        print(f"{var}: {value}")
    print()


def check_database_encoding():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–¥–∏—Ä–æ–≤–∫–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    print("=== –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–¥–∏—Ä–æ–≤–∫–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö ===")
    try:
        with connection.cursor() as cursor:
            # PostgreSQL
            cursor.execute("SELECT current_setting('server_encoding');")
            server_encoding = cursor.fetchone()[0]
            print(f"Database server encoding: {server_encoding}")
            
            cursor.execute("SELECT current_setting('client_encoding');")
            client_encoding = cursor.fetchone()[0]
            print(f"Database client encoding: {client_encoding}")
            
            cursor.execute("SHOW LC_COLLATE;")
            lc_collate = cursor.fetchone()[0]
            print(f"Database LC_COLLATE: {lc_collate}")
            
            cursor.execute("SHOW LC_CTYPE;")
            lc_ctype = cursor.fetchone()[0]
            print(f"Database LC_CTYPE: {lc_ctype}")
            
    except Exception as e:
        print(f"Error checking database encoding: {e}")
    print()


def check_file_encodings():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–¥–∏—Ä–æ–≤–∫–∏ —Ñ–∞–π–ª–æ–≤ –ø—Ä–æ–µ–∫—Ç–∞"""
    print("=== –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–¥–∏—Ä–æ–≤–∫–∏ —Ñ–∞–π–ª–æ–≤ ===")
    
    files_to_check = [
        'fotball/models.py',
        'fotball/views.py',
        'fotball/utils.py',
        'fotball/middleware.py',
        'core/settings.py',
    ]
    
    for file_path in files_to_check:
        full_path = BASE_DIR / file_path
        if full_path.exists():
            try:
                with open(full_path, 'rb') as f:
                    raw_data = f.read()
                    result = chardet.detect(raw_data)
                    confidence = result.get('confidence', 0)
                    encoding = result.get('encoding', 'unknown')
                    
                    status = "‚úì" if encoding.lower() in ['utf-8', 'ascii'] and confidence > 0.8 else "‚ö†"
                    print(f"{status} {file_path}: {encoding} (confidence: {confidence:.2f})")
                    
            except Exception as e:
                print(f"‚úó {file_path}: Error reading file - {e}")
        else:
            print(f"‚úó {file_path}: File not found")
    print()


def test_unicode_operations():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–π —Å Unicode"""
    print("=== –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Unicode –æ–ø–µ—Ä–∞—Ü–∏–π ===")
    
    test_strings = [
        "–ü—Ä–∏–≤–µ—Ç –º–∏—Ä!",
        "–¢–µ—Å—Ç —Å —ç–º–æ–¥–∑–∏: üöÄ‚öΩ",
        "–ö–∏—Ä–∏–ª–ª–∏—Ü–∞: –∞–±–≤–≥–¥–µ—ë–∂–∑–∏–π–∫–ª–º–Ω–æ–ø—Ä—Å—Ç—É—Ñ—Ö—Ü—á—à—â—ä—ã—å—ç—é—è",
        "–ö–ò–†–ò–õ–õ–ò–¶–ê: –ê–ë–í–ì–î–ï–Å–ñ–ó–ò–ô–ö–õ–ú–ù–û–ü–†–°–¢–£–§–•–¶–ß–®–©–™–´–¨–≠–Æ–Ø",
        "Mixed: Hello –ü—Ä–∏–≤–µ—Ç 123 üåü",
    ]
    
    for test_str in test_strings:
        try:
            # –¢–µ—Å—Ç –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è/–¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è
            encoded = test_str.encode('utf-8')
            decoded = encoded.decode('utf-8')
            
            if test_str == decoded:
                print(f"‚úì {test_str[:30]}...")
            else:
                print(f"‚úó {test_str[:30]}... (encoding mismatch)")
                
        except Exception as e:
            print(f"‚úó {test_str[:30]}...: {e}")
    print()


def test_database_unicode():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Unicode –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
    print("=== –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Unicode –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö ===")
    
    try:
        from fotball.models import User
        
        # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —Ä—É—Å—Å–∫–∏–º–∏ —Å–∏–º–≤–æ–ª–∞–º–∏
        test_username = "—Ç–µ—Å—Ç_–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å_üöÄ"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ —Ç–∞–∫–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        existing_user = User.objects.filter(username=test_username).first()
        if existing_user:
            existing_user.delete()
        
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = User.objects.create(
            username=test_username,
            password="—Ç–µ—Å—Ç_–ø–∞—Ä–æ–ª—å_123",
            role="admin"
        )
        
        # –ß–∏—Ç–∞–µ–º –∏–∑ –±–∞–∑—ã
        retrieved_user = User.objects.get(id=user.id)
        
        if retrieved_user.username == test_username:
            print("‚úì Database Unicode support working correctly")
        else:
            print(f"‚úó Database Unicode issue: expected '{test_username}', got '{retrieved_user.username}'")
        
        # –£–¥–∞–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user.delete()
        
    except Exception as e:
        print(f"‚úó Database Unicode test failed: {e}")
    print()


def check_django_settings():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ Django"""
    print("=== –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ Django ===")
    
    from django.conf import settings
    
    important_settings = [
        ('LANGUAGE_CODE', 'ru-ru'),
        ('TIME_ZONE', 'Europe/Moscow'),
        ('USE_I18N', True),
        ('USE_TZ', True),
        ('DEFAULT_CHARSET', 'utf-8'),
    ]
    
    for setting_name, expected in important_settings:
        actual = getattr(settings, setting_name, None)
        status = "‚úì" if actual == expected else "‚ö†"
        print(f"{status} {setting_name}: {actual} (expected: {expected})")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ middleware
    middleware = getattr(settings, 'MIDDLEWARE', [])
    encoding_middleware = [
        'fotball.middleware.UnicodeErrorHandlingMiddleware',
        'fotball.middleware.EncodingFixMiddleware'
    ]
    
    for mw in encoding_middleware:
        status = "‚úì" if mw in middleware else "‚úó"
        print(f"{status} Middleware {mw}: {'Installed' if mw in middleware else 'Missing'}")
    
    print()


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏"""
    print("AtlantService - –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∫–æ–¥–∏—Ä–æ–≤–∫–∏ Unicode")
    print("=" * 50)
    
    try:
        check_system_encoding()
        check_database_encoding()
        check_file_encodings()
        test_unicode_operations()
        test_database_unicode()
        check_django_settings()
        
        print("=== –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ ===")
        print("1. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—Å–µ —Ñ–∞–π–ª—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ UTF-8")
        print("2. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è: LANG=ru_RU.UTF-8, LC_ALL=ru_RU.UTF-8")
        print("3. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ PostgreSQL —Å–æ–∑–¥–∞–Ω —Å –∫–æ–¥–∏—Ä–æ–≤–∫–æ–π UTF-8")
        print("4. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ .env —Ñ–∞–π–ª –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ —Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫")
        print("5. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏: pip install -r requirements.txt")
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–µ: {e}")
        import traceback
        traceback.print_exc()


if __name__ == "__main__":
    main()