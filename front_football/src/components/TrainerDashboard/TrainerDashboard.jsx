import React, { useState, useEffect } from 'react';
import { trainerAPI, apiUtils, scheduleAPI } from '../../utils/api';
import PopupNotification from '../PopupNotification/PopupNotification';
import styles from './TrainerDashboard.module.css';

function TrainerDashboard({ userInfo, onLogout }) {
  const [groups, setGroups] = useState([]);
  const [trainerInfo, setTrainerInfo] = useState(null);
  const [isLoading, setIsLoading] = useState(true);
  const [error, setError] = useState(null);
  const [selectedGroup, setSelectedGroup] = useState(null);
  const [groupDetail, setGroupDetail] = useState(null);
  const [activeTab, setActiveTab] = useState('groups'); // 'groups', 'schedule', 'comments'
  const [comments, setComments] = useState([]);
  const [children, setChildren] = useState([]);
  const [showCommentForm, setShowCommentForm] = useState(false);
  const [commentForm, setCommentForm] = useState({
    child_id: '',
    comment_text: ''
  });
  const [scheduleNotifications, setScheduleNotifications] = useState([]);
  const [showPopupNotifications, setShowPopupNotifications] = useState(true);
  const [schedule, setSchedule] = useState([]);

  // –ó–∞–≥—Ä—É–∑–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
  const loadScheduleNotifications = async () => {
    try {
      const response = await scheduleAPI.getNotifications();
      setScheduleNotifications(response.notifications || []);
    } catch (err) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏:', err);
    }
  };

  const handleNotificationMarkAsRead = (notificationId) => {
    setScheduleNotifications(prev => 
      prev.map(n => n.id === notificationId ? { ...n, is_read: true } : n)
    );
  };

  const handleClosePopupNotifications = () => {
    setShowPopupNotifications(false);
  };

  // –ó–∞–≥—Ä—É–∑–∫–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è —Ç—Ä–µ–Ω–µ—Ä–∞
  const loadSchedule = async () => {
    try {
      const response = await scheduleAPI.getSchedule();
      // API –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –º–∞—Å—Å–∏–≤ –Ω–∞–ø—Ä—è–º—É—é, –∞ –Ω–µ –æ–±—ä–µ–∫—Ç —Å –ø–æ–ª–µ–º schedule
      const scheduleData = Array.isArray(response) ? response : [];
      setSchedule(scheduleData);
    } catch (err) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è:', err);
    }
  };

  useEffect(() => {
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –≥—Ä—É–ø–ø—ã —Ç—Ä–µ–Ω–µ—Ä–∞ –ø—Ä–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
    loadTrainerGroups();
    loadScheduleNotifications();
    loadSchedule();
  }, []);

  const loadTrainerGroups = async () => {
    try {
      setIsLoading(true);
      setError(null);
      
      const response = await trainerAPI.getGroups();
      
      if (response.success) {
        setGroups(response.groups);
        setTrainerInfo(response.trainer_info);
      } else {
        setError('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –≥—Ä—É–ø–ø—ã');
      }
    } catch (err) {
      const errorMessage = apiUtils.handleError(err);
      setError(errorMessage);
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≥—Ä—É–ø–ø:', err);
    } finally {
      setIsLoading(false);
    }
  };

  const loadGroupDetail = async (groupId) => {
    try {
      setError(null);
      
      const response = await trainerAPI.getGroupDetail(groupId);
      
      if (response.success) {
        setGroupDetail(response);
        setSelectedGroup(groupId);
      } else {
        setError('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≥—Ä—É–ø–ø–µ');
      }
    } catch (err) {
      const errorMessage = apiUtils.handleError(err);
      setError(errorMessage);
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≥—Ä—É–ø–ø–µ:', err);
    }
  };

  // –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤
  const loadComments = async () => {
    try {
      setIsLoading(true);
      const response = await trainerAPI.getComments();
      setComments(response.comments || []);
      setChildren(response.children || []);
    } catch (err) {
      const errorMessage = apiUtils.handleError(err);
      setError(errorMessage);
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤:', err);
    } finally {
      setIsLoading(false);
    }
  };

  // –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
  const handleCreateComment = async (e) => {
    e.preventDefault();
    
    if (!commentForm.child_id || !commentForm.comment_text.trim()) {
      setError('–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–±–µ–Ω–∫–∞ –∏ –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π');
      return;
    }

    try {
      setIsLoading(true);
      setError(null);
      
      await trainerAPI.createComment({
        child_id: commentForm.child_id,
        comment_text: commentForm.comment_text.trim()
      });
      
      // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–æ—Ä–º—É
      setCommentForm({
        child_id: '',
        comment_text: ''
      });
      setShowCommentForm(false);
      
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤
      await loadComments();
      
    } catch (err) {
      const errorMessage = apiUtils.handleError(err);
      setError(errorMessage);
      console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è:', err);
    } finally {
      setIsLoading(false);
    }
  };

  // useEffect –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –ø—Ä–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–∏ –Ω–∞ –≤–∫–ª–∞–¥–∫—É
  useEffect(() => {
    if (activeTab === 'comments') {
      loadComments();
    }
  }, [activeTab]);

  const formatDate = (dateString) => {
    if (!dateString) return '–ù–µ —É–∫–∞–∑–∞–Ω–∞';
    return new Date(dateString).toLocaleDateString('ru-RU');
  };

  // –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –ø–æ —Å–∞–¥–∞–º –∏ –≥—Ä—É–ø–ø–∞–º
  const groupScheduleByGardenAndGroup = (schedule) => {
    const grouped = {};
    
    schedule.forEach((training) => {
      const gardenName = training.group?.garden?.name || `–î–µ—Ç—Å–∫–∏–π —Å–∞–¥ ‚Ññ${training.group?.kindergarten_number || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}`;
      const groupName = training.group?.name || '–ë–µ–∑ –≥—Ä—É–ø–ø—ã';
      
      if (!grouped[gardenName]) {
        grouped[gardenName] = {};
      }
      
      if (!grouped[gardenName][groupName]) {
        grouped[gardenName][groupName] = [];
      }
      
      grouped[gardenName][groupName].push(training);
    });
    
    return grouped;
  };

  const groupedSchedule = groupScheduleByGardenAndGroup(schedule);

  return (
    <div className={styles.dashboard}>
      {/* –í—Å–ø–ª—ã–≤–∞—é—â–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è */}
      {showPopupNotifications && (
        <PopupNotification
          notifications={scheduleNotifications}
          onMarkAsRead={handleNotificationMarkAsRead}
          onClose={handleClosePopupNotifications}
        />
      )}
      {/* –®–∞–ø–∫–∞ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ */}
      <header className={styles.header}>
        <div className={styles.userInfo}>
          <span>üë§ {userInfo.username}</span>
          <span>–†–æ–ª—å: {userInfo.role_display || userInfo.role}</span>
          {trainerInfo && (
            <>
              <span>–¢—Ä–µ–Ω–µ—Ä: {trainerInfo.full_name}</span>
              <span>–¢–µ–ª–µ—Ñ–æ–Ω: {trainerInfo.phone}</span>
            </>
          )}
        </div>
      </header>

      {/* –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç */}
      <main className={styles.main}>
        <h1>–ö–∞–±–∏–Ω–µ—Ç —Ç—Ä–µ–Ω–µ—Ä–∞</h1>
        
        {/* –¢–∞–±—ã */}
        <div className={styles.tabs}>
          <button
            className={`${styles.tab} ${activeTab === 'groups' ? styles.activeTab : ''}`}
            onClick={() => setActiveTab('groups')}
          >
            –ì—Ä—É–ø–ø—ã
          </button>
          <button
            className={`${styles.tab} ${activeTab === 'schedule' ? styles.activeTab : ''}`}
            onClick={() => setActiveTab('schedule')}
          >
            üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ
          </button>
          <button
            className={`${styles.tab} ${activeTab === 'comments' ? styles.activeTab : ''}`}
            onClick={() => setActiveTab('comments')}
          >
            –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏
          </button>
        </div>
        
        {error && (
          <div className={styles.error}>
            <p>–û—à–∏–±–∫–∞: {error}</p>
            <button onClick={loadTrainerGroups}>–ü–æ–≤—Ç–æ—Ä–∏—Ç—å</button>
          </div>
        )}
        
        {/* –ö–æ–Ω—Ç–µ–Ω—Ç –≤–∫–ª–∞–¥–∫–∏ "–ì—Ä—É–ø–ø—ã" */}
        {activeTab === 'groups' && (
          <>
            {isLoading ? (
              <div className={styles.loading}>–ó–∞–≥—Ä—É–∑–∫–∞ –≥—Ä—É–ø–ø...</div>
            ) : (
              <div className={styles.content}>
            {/* –°–ø–∏—Å–æ–∫ –≥—Ä—É–ø–ø */}
            <div className={styles.groupsSection}>
              <h2>–ú–æ–∏ –≥—Ä—É–ø–ø—ã ({groups.length})</h2>
              
              {groups.length > 0 ? (
                <div className={styles.groupsList}>
                  {groups.map(group => (
                    <div 
                      key={group.id} 
                      className={`${styles.groupCard} ${selectedGroup === group.id ? styles.selected : ''}`}
                      onClick={() => loadGroupDetail(group.id)}
                    >
                      <div className={styles.groupHeader}>
                        <h3>{group.name}</h3>
                        <span className={styles.ageLevel}>{group.age_level}</span>
                      </div>
                      <div className={styles.groupInfo}>
                        <p>–î–µ—Ç–µ–π –≤ –≥—Ä—É–ø–ø–µ: {group.children_count}</p>
                      </div>
                    </div>
                  ))}
                </div>
              ) : (
                <p className={styles.noGroups}>–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –≥—Ä—É–ø–ø</p>
              )}
            </div>

            {/* –î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≥—Ä—É–ø–ø–µ */}
            {groupDetail && (
              <div className={styles.groupDetail}>
                <h2>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≥—Ä—É–ø–ø–µ: {groupDetail.group.name}</h2>
                
                <div className={styles.groupStats}>
                  <div className={styles.stat}>
                    <span>–í–æ–∑—Ä–∞—Å—Ç–Ω–∞—è –≥—Ä—É–ø–ø–∞:</span>
                    <span>{groupDetail.group.age_level}</span>
                  </div>
                  <div className={styles.stat}>
                    <span>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–µ—Ç–µ–π:</span>
                    <span>{groupDetail.children_count}</span>
                  </div>
                </div>

                {/* –°–ø–∏—Å–æ–∫ –¥–µ—Ç–µ–π */}
                <div className={styles.childrenSection}>
                  <h3>–î–µ—Ç–∏ –≤ –≥—Ä—É–ø–ø–µ</h3>
                  
                  {groupDetail.children.length > 0 ? (
                    <div className={styles.childrenList}>
                      {groupDetail.children.map(child => (
                                                 <div key={child.id} className={styles.childCard}>
                           <div className={styles.childInfo}>
                             <h4>{child.full_name}</h4>
                             <p>–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è: {formatDate(child.birth_date)}</p>
                             <p>–†–æ–¥–∏—Ç–µ–ª—å: {child.parent_name || '–ù–µ —É–∫–∞–∑–∞–Ω'}</p>
                             {child.parent_phone && (
                               <p>–¢–µ–ª–µ—Ñ–æ–Ω: {child.parent_phone}</p>
                             )}
                             <p className={styles.attendanceCount}>
                               –ü–æ—Å–µ—â–µ–Ω–æ –∑–∞–Ω—è—Ç–∏–π –≤ —ç—Ç–æ–º –º–µ—Å—è—Ü–µ: <strong>{child.attendance_count}</strong>
                             </p>
                           </div>
                         </div>
                      ))}
                    </div>
                  ) : (
                    <p>–í –≥—Ä—É–ø–ø–µ –ø–æ–∫–∞ –Ω–µ—Ç –¥–µ—Ç–µ–π</p>
                  )}
                </div>
                </div>
              )}
            </div>
            )}
          </>
        )}

        {/* –ö–æ–Ω—Ç–µ–Ω—Ç –≤–∫–ª–∞–¥–∫–∏ "–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏" */}
        {activeTab === 'comments' && (
          <div className={styles.commentsSection}>
            <div className={styles.commentsHeader}>
              <h2>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –æ –¥–µ—Ç—è—Ö</h2>
              <button 
                className={styles.addCommentButton}
                onClick={() => setShowCommentForm(!showCommentForm)}
              >
                {showCommentForm ? '–û—Ç–º–µ–Ω–∞' : '–î–æ–±–∞–≤–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π'}
              </button>
            </div>

            {showCommentForm && (
              <form onSubmit={handleCreateComment} className={styles.commentForm}>
                <h3>–ù–æ–≤—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π</h3>
                
                <div className={styles.formGroup}>
                  <label>–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–±–µ–Ω–∫–∞:</label>
                  <select
                    value={commentForm.child_id}
                    onChange={(e) => setCommentForm({...commentForm, child_id: e.target.value})}
                    required
                  >
                    <option value="">-- –í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–±–µ–Ω–∫–∞ --</option>
                    {children.map(child => (
                      <option key={child.id} value={child.id}>
                        {child.name} ({child.group})
                      </option>
                    ))}
                  </select>
                </div>

                <div className={styles.formGroup}>
                  <label>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:</label>
                  <textarea
                    value={commentForm.comment_text}
                    onChange={(e) => setCommentForm({...commentForm, comment_text: e.target.value})}
                    placeholder="–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –æ —Ä–µ–±–µ–Ω–∫–µ..."
                    rows="4"
                    required
                  />
                </div>

                <div className={styles.formActions}>
                  <button type="button" onClick={() => setShowCommentForm(false)}>
                    –û—Ç–º–µ–Ω–∞
                  </button>
                  <button type="submit" disabled={isLoading}>
                    {isLoading ? '–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ...' : '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π'}
                  </button>
                </div>
              </form>
            )}

            {isLoading ? (
              <div className={styles.loading}>–ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤...</div>
            ) : (
              <div className={styles.commentsList}>
                {comments.length > 0 ? (
                  comments.map(comment => (
                    <div key={comment.id} className={styles.commentItem}>
                      <div className={styles.commentHeader}>
                        <div className={styles.commentChild}>
                          <strong>{comment.child.name}</strong>
                          <span className={styles.commentGroup}>({comment.child.group})</span>
                        </div>
                        <div className={styles.commentDate}>
                          {comment.created_at}
                        </div>
                      </div>
                      <div className={styles.commentText}>
                        {comment.comment_text}
                      </div>
                    </div>
                  ))
                ) : (
                  <div className={styles.noComments}>
                    –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –ø–æ–∫–∞ –Ω–µ—Ç. –î–æ–±–∞–≤—å—Ç–µ –ø–µ—Ä–≤—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π!
                  </div>
                )}
              </div>
            )}
          </div>
        )}

        {/* –í–∫–ª–∞–¥–∫–∞ "–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ" */}
        {activeTab === 'schedule' && (
          <div className={styles.scheduleSection}>
            <h2>–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫</h2>
            
            {Object.keys(groupedSchedule).length === 0 ? (
              <div className={styles.scheduleInfo}>
                <p>–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫</p>
              </div>
            ) : (
              <div className={styles.scheduleContainer}>
                {Object.entries(groupedSchedule).map(([gardenName, groups]) => (
                  <div key={gardenName} className={styles.gardenSection}>
                    <h3 className={styles.gardenTitle}>üè¢ {gardenName}</h3>
                    {Object.entries(groups).map(([groupName, trainings]) => (
                      <div key={groupName} className={styles.groupSection}>
                        <h4 className={styles.groupTitle}>üë• {groupName}</h4>
                        <div className={styles.trainingsGrid}>
                          {trainings.map((training) => (
                            <div key={training.id} className={styles.trainingCard}>
                              <div className={styles.trainingDate}>
                                {training.date}
                              </div>
                              <div className={styles.trainingTime}>
                                {training.time}
                              </div>
                              <div className={styles.trainingStatus}>
                                {training.status_code === 'scheduled' ? 'üìÖ' : 
                                 training.status_code === 'completed' ? '‚úÖ' : 
                                 training.status_code === 'cancelled' ? '‚ùå' : '‚è≥'}
                              </div>
                            </div>
                          ))}
                        </div>
                      </div>
                    ))}
                  </div>
                ))}
              </div>
            )}
          </div>
        )}
      </main>
    </div>
  );
}

export default TrainerDashboard; 