import React, { useState, useEffect, useCallback } from 'react';
import { adminAPI, scheduleAPI } from '../../utils/api';
import styles from './AdminDashboard.module.css';

function AdminDashboard({ userInfo, onLogout }) {
  const [notifications, setNotifications] = useState([]);
  const [showNotifications, setShowNotifications] = useState(false);
  const [selectedNotification, setSelectedNotification] = useState(null);
  const [showModal, setShowModal] = useState(false);
  const [loading, setLoading] = useState(false);
  const [activeTab, setActiveTab] = useState('notifications'); // 'notifications' –∏–ª–∏ 'schedule'
  const [kindergartens, setKindergartens] = useState([]);
  const [selectedKindergarten, setSelectedKindergarten] = useState(null);
  const [selectedGroup, setSelectedGroup] = useState(null);
  const [showScheduleForm, setShowScheduleForm] = useState(false);
  const [groupSchedule, setGroupSchedule] = useState([]);
  const [editingTraining, setEditingTraining] = useState(null);
  const [scheduleMode, setScheduleMode] = useState('bulk'); // 'bulk' –∏–ª–∏ 'single'
  const [scheduleForm, setScheduleForm] = useState({
    date: '',
    time: '',
    duration_minutes: 40,
    location: '',
    notes: ''
  });
  const [bulkScheduleForm, setBulkScheduleForm] = useState({
    start_date: '',
    end_date: '',
    weekdays: [],
    time: '',
    duration_minutes: 40,
    location: '',
    notes: ''
  });

  // –ó–∞–≥—Ä—É–∑–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
  const loadNotifications = useCallback(async () => {
    try {
      const response = await adminAPI.getMedicalCertificates();
      const pendingCertificates = response.filter(cert => cert.status_code === 'pending');
      setNotifications(pendingCertificates);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:', error);
    }
  }, []);

  // –ó–∞–≥—Ä—É–∑–∫–∞ –≥—Ä—É–ø–ø –¥–ª—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
  const loadGroups = useCallback(async () => {
    try {
      const response = await adminAPI.getGroupsForSchedule();
      setKindergartens(response.kindergartens || []);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≥—Ä—É–ø–ø:', error);
    }
  }, []);

  // –ó–∞–≥—Ä—É–∑–∫–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π –≥—Ä—É–ø–ø—ã
  const loadGroupSchedule = useCallback(async (groupId) => {
    try {
      const response = await scheduleAPI.getSchedule();
      const groupTrainings = response.filter(training => training.group.id === groupId);
      setGroupSchedule(groupTrainings);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –≥—Ä—É–ø–ø—ã:', error);
    }
  }, []);

  // –ó–∞–≥—Ä—É–∑–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø—Ä–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
  useEffect(() => {
    loadNotifications();
    loadGroups();
  }, [loadNotifications, loadGroups]);

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª–∏–∫–∞ –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
  const handleNotificationClick = (notification) => {
    setSelectedNotification(notification);
    setShowModal(true);
  };

  // –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Å–ø—Ä–∞–≤–∫–∏
  const handleApprove = async () => {
    if (!selectedNotification) return;
    
    setLoading(true);
    try {
      await adminAPI.approveMedicalCertificate(selectedNotification.id);
      await loadNotifications(); // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
      setShowModal(false);
      setSelectedNotification(null);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Å–ø—Ä–∞–≤–∫–∏:', error);
    } finally {
      setLoading(false);
    }
  };

  // –û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ —Å–ø—Ä–∞–≤–∫–∏
  const handleReject = async () => {
    if (!selectedNotification) return;
    
    setLoading(true);
    try {
      await adminAPI.rejectMedicalCertificate(selectedNotification.id);
      await loadNotifications(); // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
      setShowModal(false);
      setSelectedNotification(null);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è —Å–ø—Ä–∞–≤–∫–∏:', error);
    } finally {
      setLoading(false);
    }
  };

  // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞—Ç—ã
  const formatDate = (dateString) => {
    return new Date(dateString).toLocaleDateString('ru-RU');
  };

  // –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
  const getNotificationType = (certificate) => {
    if (certificate.absence_reason && certificate.absence_reason.trim()) {
      return 'refund';
    }
    return 'certificate';
  };

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ä–º—ã —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
  const handleScheduleFormChange = (e) => {
    const { name, value } = e.target;
    setScheduleForm(prev => ({
      ...prev,
      [name]: value
    }));
  };

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ä–º—ã –º–∞—Å—Å–æ–≤–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è
  const handleBulkScheduleFormChange = (e) => {
    const { name, value, checked } = e.target;
    
    if (name === 'weekdays') {
      const weekday = parseInt(value);
      setBulkScheduleForm(prev => ({
        ...prev,
        weekdays: checked 
          ? [...prev.weekdays, weekday]
          : prev.weekdays.filter(day => day !== weekday)
      }));
    } else {
      setBulkScheduleForm(prev => ({
        ...prev,
        [name]: value
      }));
    }
  };

  // –°–æ–∑–¥–∞–Ω–∏–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
  const handleCreateTraining = async (e) => {
    e.preventDefault();
    if (!selectedGroup) {
      alert('–í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É');
      return;
    }

    setLoading(true);
    try {
      let response;
      
      if (scheduleMode === 'bulk') {
        // –ú–∞—Å—Å–æ–≤–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ
        if (bulkScheduleForm.weekdays.length === 0) {
          alert('–í—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏');
          return;
        }
        
        response = await adminAPI.createTraining({
          group_id: selectedGroup.id,
          bulk_create: true,
          ...bulkScheduleForm
        });
        
        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–æ—Ä–º—É
        setBulkScheduleForm({
          start_date: '',
          end_date: '',
          weekdays: [],
          time: '',
          duration_minutes: 40,
          location: '',
          notes: ''
        });
      } else {
        // –û–¥–∏–Ω–æ—á–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –∏–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
        if (editingTraining) {
          // –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
          response = await adminAPI.updateTraining(editingTraining.id, scheduleForm);
        } else {
          // –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
          response = await adminAPI.createTraining({
            group_id: selectedGroup.id,
            ...scheduleForm
          });
        }
        
        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–æ—Ä–º—É
        setScheduleForm({
          date: '',
          time: '',
          duration_minutes: 40,
          location: '',
          notes: ''
        });
        setEditingTraining(null);
      }
      
      setShowScheduleForm(false);
      
      // –û–±–Ω–æ–≤–ª—è–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã
      if (selectedGroup) {
        await loadGroupSchedule(selectedGroup.id);
      }
      
      alert(response.message || '–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!');
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏:', error);
      alert('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏: ' + (error.error || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'));
    } finally {
      setLoading(false);
    }
  };

  // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
  useEffect(() => {
    loadNotifications();
    loadGroups();
  }, [loadNotifications, loadGroups]);

  return (
    <div className={styles.dashboard}>
      {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏ */}
      <header className={styles.header}>
        <h1 className={styles.title}>–ö–∞–±–∏–Ω–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞</h1>
        
        {/* –í–∫–ª–∞–¥–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ */}
        <div className={styles.tabs}>
          <button 
            className={`${styles.tab} ${activeTab === 'notifications' ? styles.activeTab : ''}`}
            onClick={() => setActiveTab('notifications')}
          >
            üìã –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            {notifications.length > 0 && (
              <span className={styles.tabBadge}>{notifications.length}</span>
            )}
          </button>
          <button 
            className={`${styles.tab} ${activeTab === 'schedule' ? styles.activeTab : ''}`}
            onClick={() => setActiveTab('schedule')}
          >
            üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ
          </button>
        </div>
        
        <div className={styles.headerActions}>
          <div className={styles.notificationContainer}>
            <button 
              className={styles.notificationButton}
              onClick={() => setShowNotifications(!showNotifications)}
            >
              üìã
              {notifications.length > 0 && (
                <span className={styles.notificationBadge}>{notifications.length}</span>
              )}
            </button>
            
            {/* –í—ã–ø–∞–¥–∞—é—â–∏–π —Å–ø–∏—Å–æ–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π */}
            {showNotifications && (
              <div className={styles.notificationsDropdown}>
                <div className={styles.notificationsHeader}>
                  <h3>–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Å–ø—Ä–∞–≤–∫–∞—Ö</h3>
                  <button 
                    className={styles.closeButton}
                    onClick={() => setShowNotifications(false)}
                  >
                    ‚úï
                  </button>
                </div>
                
                {notifications.length === 0 ? (
                  <div className={styles.noNotifications}>
                    –ù–µ—Ç –Ω–æ–≤—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
                  </div>
                ) : (
                  <div className={styles.notificationsList}>
                    {notifications.map((notification) => (
                      <div 
                        key={notification.id}
                        className={styles.notificationItem}
                        onClick={() => handleNotificationClick(notification)}
                      >
                        <div className={styles.notificationType}>
                          {getNotificationType(notification) === 'refund' ? 'üí∞' : 'üìÑ'}
                        </div>
                        <div className={styles.notificationContent}>
                          <div className={styles.notificationTitle}>
                            {getNotificationType(notification) === 'refund' 
                              ? '–ó–∞–ø—Ä–æ—Å –Ω–∞ –ø–µ—Ä–µ—Ä–∞—Å—á–µ—Ç' 
                              : '–ú–µ–¥–∏—Ü–∏–Ω—Å–∫–∞—è —Å–ø—Ä–∞–≤–∫–∞'
                            }
                          </div>
                          <div className={styles.notificationDetails}>
                            <strong>{notification.child_name}</strong> ‚Ä¢ {formatDate(notification.date_from)} - {formatDate(notification.date_to)}
                          </div>
                          <div className={styles.notificationDate}>
                            {formatDate(notification.uploaded_at)}
                          </div>
                        </div>
                      </div>
                    ))}
                  </div>
                )}
              </div>
            )}
          </div>
          
          <button className={styles.logoutButton} onClick={onLogout}>
            –í—ã–π—Ç–∏
          </button>
        </div>
      </header>

      {/* –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç */}
      <main className={styles.main}>
        {/* –í–∫–ª–∞–¥–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π */}
        {activeTab === 'notifications' && (
          <div className={styles.tabContent}>
            {notifications.length > 0 ? (
              <div className={styles.alert}>
                –£ –≤–∞—Å –µ—Å—Ç—å {notifications.length} {notifications.length === 1 ? '–Ω–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ' : '–Ω–æ–≤—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è'} –æ —Å–ø—Ä–∞–≤–∫–∞—Ö
              </div>
            ) : (
              <div className={styles.noNotificationsMain}>
                <h3>–ù–µ—Ç –Ω–æ–≤—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π</h3>
                <p>–í—Å–µ —Å–ø—Ä–∞–≤–∫–∏ –∏ –∑–∞–ø—Ä–æ—Å—ã –Ω–∞ –ø–µ—Ä–µ—Ä–∞—Å—á–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã</p>
              </div>
            )}
          </div>
        )}

        {/* –í–∫–ª–∞–¥–∫–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è */}
        {activeTab === 'schedule' && (
          <div className={styles.tabContent}>
            <div className={styles.scheduleContainer}>
              <div className={styles.scheduleHeader}>
                <h2>–°–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫</h2>
                {selectedGroup && (
                  <div className={styles.scheduleActions}>
                    <button 
                      className={styles.addTrainingButton}
                      onClick={() => {
                        setScheduleMode('bulk');
                        setShowScheduleForm(true);
                      }}
                    >
                      üìÖ –ë—ã—Å—Ç—Ä–æ–µ —Å–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ
                    </button>
                    <button 
                      className={styles.editTrainingButton}
                      onClick={() => {
                        setScheduleMode('single');
                        setShowScheduleForm(true);
                      }}
                    >
                      ‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É
                    </button>
                  </div>
                )}
              </div>

              <div className={styles.scheduleContent}>
                {/* –í—ã–±–æ—Ä –¥–µ—Ç—Å–∫–æ–≥–æ —Å–∞–¥–∞ */}
                <div className={styles.kindergartenSelector}>
                  <h3>–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ—Ç—Å–∫–∏–π —Å–∞–¥:</h3>
                  <div className={styles.kindergartenList}>
                    {kindergartens.map((kindergarten) => (
                      <button
                        key={kindergarten.number}
                        className={`${styles.kindergartenCard} ${selectedKindergarten?.number === kindergarten.number ? styles.selected : ''}`}
                        onClick={() => {
                          setSelectedKindergarten(kindergarten);
                          setSelectedGroup(null);
                        }}
                      >
                        <h4>–î–µ—Ç—Å–∫–∏–π —Å–∞–¥ ‚Ññ{kindergarten.number}</h4>
                        <p>{kindergarten.groups.length} {kindergarten.groups.length === 1 ? '–≥—Ä—É–ø–ø–∞' : '–≥—Ä—É–ø–ø'}</p>
                      </button>
                    ))}
                  </div>
                </div>

                {/* –í—ã–±–æ—Ä –≥—Ä—É–ø–ø—ã */}
                {selectedKindergarten && (
                  <div className={styles.groupSelector}>
                    <h3>–í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É:</h3>
                    <div className={styles.groupList}>
                      {selectedKindergarten.groups.map((group) => (
                        <button
                          key={group.id}
                          className={`${styles.groupCard} ${selectedGroup?.id === group.id ? styles.selected : ''}`}
                          onClick={() => {
                            setSelectedGroup(group);
                            loadGroupSchedule(group.id);
                          }}
                        >
                          <h4>{group.name}</h4>
                          <p>–í–æ–∑—Ä–∞—Å—Ç: {group.age_level}</p>
                          <p>–¢—Ä–µ–Ω–µ—Ä: {group.trainer.name}</p>
                          <p>–î–µ—Ç–µ–π: {group.children_count}</p>
                        </button>
                      ))}
                    </div>
                  </div>
                )}

                {/* –°—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –≥—Ä—É–ø–ø—ã */}
                {selectedGroup && groupSchedule.length > 0 && (
                  <div className={styles.existingTrainings}>
                    <h3>–°—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –≥—Ä—É–ø–ø—ã "{selectedGroup.name}"</h3>
                    <div className={styles.trainingsList}>
                      {groupSchedule.map((training) => (
                        <div key={training.id} className={styles.trainingCard}>
                          <div className={styles.trainingInfo}>
                            <div className={styles.trainingDate}>{training.date}</div>
                            <div className={styles.trainingTime}>{training.time}</div>
                            <div className={styles.trainingStatus}>{training.status}</div>
                          </div>
                          <div className={styles.trainingActions}>
                            <button 
                              className={styles.editButton}
                              onClick={() => {
                                setEditingTraining(training);
                                setScheduleMode('single');
                                setScheduleForm({
                                  date: training.date.split('.').reverse().join('-'), // DD.MM.YYYY -> YYYY-MM-DD
                                  time: training.time,
                                  duration_minutes: training.duration_minutes,
                                  location: training.location,
                                  notes: training.notes
                                });
                                setShowScheduleForm(true);
                              }}
                            >
                              ‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å
                            </button>
                          </div>
                        </div>
                      ))}
                    </div>
                  </div>
                )}

                {/* –§–æ—Ä–º–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ */}
                {showScheduleForm && selectedGroup && (
                  <div className={styles.scheduleFormContainer}>
                    <div className={styles.scheduleFormHeader}>
                      <h3>
                        {scheduleMode === 'bulk' 
                          ? '–ë—ã—Å—Ç—Ä–æ–µ —Å–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è' 
                          : editingTraining 
                            ? '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É'
                            : '–î–æ–±–∞–≤–∏—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É'
                        } –¥–ª—è –≥—Ä—É–ø–ø—ã "{selectedGroup.name}"
                      </h3>
                      <button 
                        className={styles.closeButton}
                        onClick={() => setShowScheduleForm(false)}
                      >
                        ‚úï
                      </button>
                    </div>
                    
                    <form onSubmit={handleCreateTraining} className={styles.scheduleForm}>
                      {scheduleMode === 'bulk' ? (
                        // –§–æ—Ä–º–∞ –º–∞—Å—Å–æ–≤–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è
                        <>
                          <div className={styles.formRow}>
                            <div className={styles.formGroup}>
                              <label>–î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞ –ø–µ—Ä–∏–æ–¥–∞:</label>
                              <input
                                type="date"
                                name="start_date"
                                value={bulkScheduleForm.start_date}
                                onChange={handleBulkScheduleFormChange}
                                required
                              />
                            </div>
                            <div className={styles.formGroup}>
                              <label>–î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø–µ—Ä–∏–æ–¥–∞:</label>
                              <input
                                type="date"
                                name="end_date"
                                value={bulkScheduleForm.end_date}
                                onChange={handleBulkScheduleFormChange}
                                required
                              />
                            </div>
                          </div>
                          
                          <div className={styles.formGroup}>
                            <label>–î–Ω–∏ –Ω–µ–¥–µ–ª–∏ –¥–ª—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫:</label>
                            <div className={styles.weekdaysSelector}>
                              {[
                                { value: 0, label: '–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫' },
                                { value: 1, label: '–í—Ç–æ—Ä–Ω–∏–∫' },
                                { value: 2, label: '–°—Ä–µ–¥–∞' },
                                { value: 3, label: '–ß–µ—Ç–≤–µ—Ä–≥' },
                                { value: 4, label: '–ü—è—Ç–Ω–∏—Ü–∞' },
                                { value: 5, label: '–°—É–±–±–æ—Ç–∞' },
                                { value: 6, label: '–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ' }
                              ].map((day) => (
                                <label key={day.value} className={styles.checkboxLabel}>
                                  <input
                                    type="checkbox"
                                    name="weekdays"
                                    value={day.value}
                                    checked={bulkScheduleForm.weekdays.includes(day.value)}
                                    onChange={handleBulkScheduleFormChange}
                                  />
                                  {day.label}
                                </label>
                              ))}
                            </div>
                          </div>
                          
                          <div className={styles.formRow}>
                            <div className={styles.formGroup}>
                              <label>–í—Ä–µ–º—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏:</label>
                              <input
                                type="time"
                                name="time"
                                value={bulkScheduleForm.time}
                                onChange={handleBulkScheduleFormChange}
                                required
                              />
                            </div>
                            <div className={styles.formGroup}>
                              <label>–ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å (–º–∏–Ω—É—Ç—ã):</label>
                              <input
                                type="number"
                                name="duration_minutes"
                                value={bulkScheduleForm.duration_minutes}
                                onChange={handleBulkScheduleFormChange}
                                min="15"
                                max="120"
                                required
                              />
                            </div>
                          </div>
                          
                          <div className={styles.formGroup}>
                            <label>–ú–µ—Å—Ç–æ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è:</label>
                            <input
                              type="text"
                              name="location"
                              value={bulkScheduleForm.location}
                              onChange={handleBulkScheduleFormChange}
                              placeholder="–°–ø–æ—Ä—Ç–∏–≤–Ω—ã–π –∑–∞–ª, –ø–ª–æ—â–∞–¥–∫–∞ –∏ —Ç.–¥."
                            />
                          </div>
                          
                          <div className={styles.formGroup}>
                            <label>–ó–∞–º–µ—Ç–∫–∏:</label>
                            <textarea
                              name="notes"
                              value={bulkScheduleForm.notes}
                              onChange={handleBulkScheduleFormChange}
                              placeholder="–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞—Ö"
                            />
                          </div>
                          
                          <div className={styles.formActions}>
                            <button 
                              type="button" 
                              className={styles.cancelButton}
                              onClick={() => setShowScheduleForm(false)}
                            >
                              –û—Ç–º–µ–Ω–∞
                            </button>
                            <button 
                              type="submit" 
                              className={styles.createButton}
                              disabled={loading}
                            >
                              {loading ? '–°–æ–∑–¥–∞–Ω–∏–µ...' : '–°–æ–∑–¥–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ'}
                            </button>
                          </div>
                        </>
                      ) : (
                        // –§–æ—Ä–º–∞ –æ–¥–∏–Ω–æ—á–Ω–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è
                        <>
                      <div className={styles.formRow}>
                        <div className={styles.formGroup}>
                          <label>–î–∞—Ç–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏:</label>
                          <input
                            type="date"
                            name="date"
                            value={scheduleForm.date}
                            onChange={handleScheduleFormChange}
                            required
                          />
                        </div>
                        <div className={styles.formGroup}>
                          <label>–í—Ä–µ–º—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏:</label>
                          <input
                            type="time"
                            name="time"
                            value={scheduleForm.time}
                            onChange={handleScheduleFormChange}
                            required
                          />
                        </div>
                      </div>
                      
                      <div className={styles.formRow}>
                        <div className={styles.formGroup}>
                          <label>–ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å (–º–∏–Ω—É—Ç—ã):</label>
                          <input
                            type="number"
                            name="duration_minutes"
                            value={scheduleForm.duration_minutes}
                            onChange={handleScheduleFormChange}
                            min="15"
                            max="120"
                            required
                          />
                        </div>
                        <div className={styles.formGroup}>
                          <label>–ú–µ—Å—Ç–æ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è:</label>
                          <input
                            type="text"
                            name="location"
                            value={scheduleForm.location}
                            onChange={handleScheduleFormChange}
                            placeholder="–°–ø–æ—Ä—Ç–∏–≤–Ω—ã–π –∑–∞–ª, –ø–ª–æ—â–∞–¥–∫–∞ –∏ —Ç.–¥."
                          />
                        </div>
                      </div>
                      
                      <div className={styles.formGroup}>
                        <label>–ó–∞–º–µ—Ç–∫–∏:</label>
                        <textarea
                          name="notes"
                          value={scheduleForm.notes}
                          onChange={handleScheduleFormChange}
                          placeholder="–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–µ"
                        />
                      </div>
                      
                      <div className={styles.formActions}>
                        <button 
                          type="button" 
                          className={styles.cancelButton}
                          onClick={() => setShowScheduleForm(false)}
                        >
                          –û—Ç–º–µ–Ω–∞
                        </button>
                        <button 
                          type="submit" 
                          className={styles.createButton}
                          disabled={loading}
                        >
                          {loading ? '–°–æ–∑–¥–∞–Ω–∏–µ...' : '–°–æ–∑–¥–∞—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É'}
                        </button>
                      </div>
                        </>
                      )}
                    </form>
                  </div>
                )}
              </div>
            </div>
          </div>
        )}
      </main>

      {/* –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–ø—Ä–∞–≤–∫–∏ */}
      {showModal && selectedNotification && (
        <div className={styles.modalOverlay}>
          <div className={styles.modal}>
            <div className={styles.modalHeader}>
              <h3>
                {getNotificationType(selectedNotification) === 'refund' 
                  ? '–ó–∞–ø—Ä–æ—Å –Ω–∞ –ø–µ—Ä–µ—Ä–∞—Å—á–µ—Ç' 
                  : '–ú–µ–¥–∏—Ü–∏–Ω—Å–∫–∞—è —Å–ø—Ä–∞–≤–∫–∞'
                }
              </h3>
              <button 
                className={styles.closeButton}
                onClick={() => setShowModal(false)}
              >
                ‚úï
              </button>
            </div>
            
            <div className={styles.modalContent}>
              <div className={styles.certificateInfo}>
                <div className={styles.infoRow}>
                  <span className={styles.infoLabel}>–†–µ–±–µ–Ω–æ–∫:</span>
                  <span className={styles.infoValue}>{selectedNotification.child_name}</span>
                </div>
                <div className={styles.infoRow}>
                  <span className={styles.infoLabel}>–ü–µ—Ä–∏–æ–¥ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è:</span>
                  <span className={styles.infoValue}>
                    {formatDate(selectedNotification.date_from)} - {formatDate(selectedNotification.date_to)}
                  </span>
                </div>
                <div className={styles.infoRow}>
                  <span className={styles.infoLabel}>–î–∞—Ç–∞ –ø–æ–¥–∞—á–∏:</span>
                  <span className={styles.infoValue}>{formatDate(selectedNotification.uploaded_at)}</span>
                </div>
                
                {selectedNotification.note && (
                  <div className={styles.infoRow}>
                    <span className={styles.infoLabel}>–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ:</span>
                    <span className={styles.infoValue}>{selectedNotification.note}</span>
                  </div>
                )}
                
                {selectedNotification.absence_reason && (
                  <div className={styles.infoRow}>
                    <span className={styles.infoLabel}>–ü—Ä–∏—á–∏–Ω–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è:</span>
                    <span className={styles.infoValue}>{selectedNotification.absence_reason}</span>
                  </div>
                )}
                
                {selectedNotification.file_url && (
                  <div className={styles.infoRow}>
                    <span className={styles.infoLabel}>–ü—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–Ω—ã–π —Ñ–∞–π–ª:</span>
                    <a 
                      href={selectedNotification.file_url} 
                      target="_blank" 
                      rel="noopener noreferrer"
                      className={styles.fileLink}
                    >
                      üìé {selectedNotification.file_name || '–û—Ç–∫—Ä—ã—Ç—å —Ñ–∞–π–ª'}
                    </a>
                  </div>
                )}
              </div>
            </div>
            
            <div className={styles.modalActions}>
              <button 
                className={styles.rejectButton}
                onClick={handleReject}
                disabled={loading}
              >
                –û—Ç–∫–ª–æ–Ω–∏—Ç—å
              </button>
              <button 
                className={styles.approveButton}
                onClick={handleApprove}
                disabled={loading}
              >
                {loading ? '–û–±—Ä–∞–±–æ—Ç–∫–∞...' : '–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å'}
              </button>
            </div>
          </div>
        </div>
      )}
    </div>
  );
}

export default AdminDashboard; 